<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/VKCachedData.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/VKCachedData</TokenIdentifier>
			<Abstract type="html">This interface is intended for storing, retrieving and removing cache requests.
Data will be stored on local drive and in the directory set during initialization process</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/initWithCacheDirectory:</TokenIdentifier>
			<Abstract type="html">Object initialization method</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (instancetype)initWithCacheDirectory:(NSString *)path</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">directory where cached data will be stored. If directory does not exist, it will be created</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">VKCachedData instance</Abstract></ReturnValue>
			<Anchor>//api/name/initWithCacheDirectory:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/addCachedData:forURL:</TokenIdentifier>
			<Abstract type="html">Add data in cache
Default TTL is one hour</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (void)addCachedData:(NSData *)cache forURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>cache</Name>
					<Abstract type="html">data to be cached</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">url which matches to cached data</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addCachedData:forURL:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/addCachedData:forURL:liveTime:</TokenIdentifier>
			<Abstract type="html">Add data in cache</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (void)addCachedData:(NSData *)cache forURL:(NSURL *)url liveTime:(VKCachedDataLiveTime)cacheLiveTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>cache</Name>
					<Abstract type="html">data to be cached</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">url which matches to cached data</Abstract>
				</Parameter><Parameter>
					<Name>cacheLiveTime</Name>
					<Abstract type="html">cache ttl value. Possible options can be found in VKCachedDataLiveTime interface
(VKCachedDataLiveTimeOneHour, VKCachedDataLiveTimeOneDay, VKCachedDataLiveTimeForever, etc.)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addCachedData:forURL:liveTime:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/removeCachedDataForURL:</TokenIdentifier>
			<Abstract type="html">Remove data from cache that is associated with passed url</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (void)removeCachedDataForURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">url which matches to cached data</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeCachedDataForURL:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/clearCachedData</TokenIdentifier>
			<Abstract type="html">Remove all cached data from the current objects instance directory</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (void)clearCachedData</Declaration>
			
			
			<Anchor>//api/name/clearCachedData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/removeCachedDataDirectory</TokenIdentifier>
			<Abstract type="html">Remove current objects directory and all cached data inside</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (void)removeCachedDataDirectory</Declaration>
			
			
			<Anchor>//api/name/removeCachedDataDirectory</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/cachedDataForURL:</TokenIdentifier>
			<Abstract type="html">Retrieve cached data which matches to passed url.
If associated item does not exist nil will be returned</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (NSData *)cachedDataForURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">url which matches to cached data</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSData instance</Abstract></ReturnValue>
			<Anchor>//api/name/cachedDataForURL:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VKCachedData/cachedDataForURL:offlineMode:</TokenIdentifier>
			<Abstract type="html">Retrieve cached data which matches to passed url.
If associated item does not exist nil will be returned</Abstract>
			<DeclaredIn>VKCachedData.h</DeclaredIn>			
			
			<Declaration>- (NSData *)cachedDataForURL:(NSURL *)url offlineMode:(BOOL)offlineMode</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">url which matches to cached data</Abstract>
				</Parameter><Parameter>
					<Name>offlineMode</Name>
					<Abstract type="html">cache access offline mode</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSData instance</Abstract></ReturnValue>
			<Anchor>//api/name/cachedDataForURL:offlineMode:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
	</File>
</Tokens>